(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4631],{72253:function(n,s,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/adding-custom-styles",function(){return a(62467)}])},62467:function(n,s,a){"use strict";a.r(s);var t=a(85893),e=a(11151),p=a(72788),o=a(36336),l=a(30196),c=a(64637);let i=p.L,r=o.X_;function u(n){let s=Object.assign({p:"p",code:"code",a:"a",hr:"hr",pre:"pre",em:"em",ul:"ul",li:"li"},(0,e.ah)(),n.components),{Heading:a,Editor:p}=s;return p||k("Editor",!0),a||k("Heading",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:"Often the biggest challenge when working with a framework is figuring out what you’re supposed to do when there’s something you need that the framework doesn’t handle for you."}),"\n",(0,t.jsx)(s.p,{children:"Tailwind has been designed from the ground up to be extensible and customizable, so that no matter what you’re building you never feel like you’re fighting the framework."}),"\n",(0,t.jsx)(s.p,{children:"This guide covers topics like customizing your design tokens, how to break out of those constraints when necessary, adding your own custom CSS, and extending the framework with plugins."}),"\n",(0,t.jsx)(a,{level:2,id:"customizing-your-theme",children:"Customizing your theme"}),"\n",(0,t.jsxs)(s.p,{children:["If you want to change things like your color palette, spacing scale, typography scale, or breakpoints, add your customizations to the ",(0,t.jsx)(s.code,{children:"theme"})," section of your ",(0,t.jsx)(s.code,{children:"tailwind.config.js"})," file:"]}),"\n",(0,t.jsx)(p,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token doc-comment comment">/** <span class="token keyword">@type</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Config<span class="token punctuation">}</span></span> */</span>\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">screens</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">sm</span><span class="token operator">:</span> <span class="token string">\'480px\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">md</span><span class="token operator">:</span> <span class="token string">\'768px\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">lg</span><span class="token operator">:</span> <span class="token string">\'976px\'</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">xl</span><span class="token operator">:</span> <span class="token string">\'1440px\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">colors</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">\'blue\'</span><span class="token operator">:</span> <span class="token string">\'#1fb6ff\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'pink\'</span><span class="token operator">:</span> <span class="token string">\'#ff49db\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'orange\'</span><span class="token operator">:</span> <span class="token string">\'#ff7849\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'green\'</span><span class="token operator">:</span> <span class="token string">\'#13ce66\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'gray-dark\'</span><span class="token operator">:</span> <span class="token string">\'#273444\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'gray\'</span><span class="token operator">:</span> <span class="token string">\'#8492a6\'</span><span class="token punctuation">,</span>\n      <span class="token string-property property">\'gray-light\'</span><span class="token operator">:</span> <span class="token string">\'#d3dce6\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">fontFamily</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">sans</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'Graphik\'</span><span class="token punctuation">,</span> <span class="token string">\'sans-serif\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">serif</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'Merriweather\'</span><span class="token punctuation">,</span> <span class="token string">\'serif\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">extend</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">spacing</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">\'128\'</span><span class="token operator">:</span> <span class="token string">\'32rem\'</span><span class="token punctuation">,</span>\n        <span class="token string-property property">\'144\'</span><span class="token operator">:</span> <span class="token string">\'36rem\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">\'4xl\'</span><span class="token operator">:</span> <span class="token string">\'2rem\'</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Learn more about customizing your theme in the ",(0,t.jsx)(s.a,{href:"/docs/theme",children:"Theme Configuration"})," documentation."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(a,{level:2,id:"using-arbitrary-values",children:"Using arbitrary values"}),"\n",(0,t.jsx)(s.p,{children:"While you can usually build the bulk of a well-crafted design using a constrained set of design tokens, once in a while you need to break out of those constraints to get things pixel-perfect."}),"\n",(0,t.jsxs)(s.p,{children:["When you find yourself really needing something like ",(0,t.jsx)(s.code,{children:"top: 117px"})," to get a background image in just the right spot, use Tailwind’s square bracket notation to generate a class on the fly with any arbitrary value:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top-[117px]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["This is basically like inline styles, with the major benefit that you can combine it with interactive modifiers like ",(0,t.jsx)(s.code,{children:"hover"})," and responsive modifiers like ",(0,t.jsx)(s.code,{children:"lg"}),":"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top-[117px] lg:top-[344px]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"This works for everything in the framework, including things like background colors, font sizes, pseudo-element content, and more:"}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-[#bada55] text-[22px] before:content-[\'Festivus\']<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["It’s even possible to use the ",(0,t.jsxs)(s.a,{href:"/docs/functions-and-directives#theme",children:[(0,t.jsx)(s.code,{children:"theme"})," function"]})," to reference the design tokens in your ",(0,t.jsx)(s.code,{children:"tailwind.config.js"})," file:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid grid-cols-[fit-content(theme(spacing.32))]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["When using a CSS variable as an arbitrary value, wrapping your variable in ",(0,t.jsx)(s.code,{children:"var(...)"})," isn’t needed — just providing the actual variable name is enough:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-[--my-color]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(a,{level:3,id:"arbitrary-properties",children:"Arbitrary properties"}),"\n",(0,t.jsx)(s.p,{children:"If you ever need to use a CSS property that Tailwind doesn’t include a utility for out of the box, you can also use square bracket notation to write completely arbitrary CSS:"}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[mask-type:luminance]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["This is ",(0,t.jsx)(s.em,{children:"really"})," like inline styles, but again with the benefit that you can use modifiers:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[mask-type:luminance] hover:[mask-type:alpha]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"This can be useful for things like CSS variables as well, especially when they need to change under different conditions:"}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[--scroll-offset:56px] lg:[--scroll-offset:44px]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(a,{level:3,id:"arbitrary-variants",children:"Arbitrary variants"}),"\n",(0,t.jsxs)(s.p,{children:["Arbitrary ",(0,t.jsx)(s.em,{children:"variants"})," are like arbitrary values but for doing on-the-fly selector modification, like you can with built-in pseudo-class variants like ",(0,t.jsx)(s.code,{children:"hover:{utility}"})," or responsive variants like ",(0,t.jsx)(s.code,{children:"md:{utility}"})," but using square bracket notation directly in your HTML."]}),"\n",(0,t.jsxs)(c.E,{children:[(0,t.jsx)(p,{filename:"HTML",code:'<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  {#each items as item}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="code-highlight bg-code-highlight">lg:[&amp;:nth-child(3)]:hover:underline</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{item}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n  {/each}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre>'}),(0,t.jsx)(p,{filename:"Generated CSS",code:'<pre class="language-css"><code class="language-css"><span class="token comment">/* https://media.giphy.com/media/Sd3cd0SrUKZEyWmAlM/giphy.gif */</span>\n<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token number">1024</span><span class="token unit">px</span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.lg</span>\\:\\<span class="token attribute"><span class="token punctuation">[</span>\\&amp;\\:nth-child\\(3\\)\\<span class="token punctuation">]</span></span>\\<span class="token pseudo-class">:hover</span>\\<span class="token">:underline</span><span class="token pseudo-class">:hover</span><span class="token pseudo-class">:nth-child</span><span class="token punctuation">(</span><span class="token n-th"><span class="token number">3</span></span><span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n    <span class="token property">text-decoration-line</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>'})]}),"\n",(0,t.jsxs)(s.p,{children:["Learn more in the ",(0,t.jsx)(s.a,{href:"/docs/hover-focus-and-other-states#using-arbitrary-variants",children:"arbitrary variants"})," documentation."]}),"\n",(0,t.jsx)(a,{level:3,id:"handling-whitespace",children:"Handling whitespace"}),"\n",(0,t.jsxs)(s.p,{children:["When an arbitrary value needs to contain a space, use an underscore (",(0,t.jsx)(s.code,{children:"_"}),") instead and Tailwind will automatically convert it to a space at build-time:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid <span class="code-highlight bg-code-highlight">grid-cols-[1fr_500px_2fr]</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"In situations where underscores are common but spaces are invalid, Tailwind will preserve the underscore instead of converting it to a space, for example in URLs:"}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-[url(\'/what_a_rush.png\')]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"In the rare case that you actually need to use an underscore but it’s ambiguous because a space is valid as well, escape the underscore with a backslash and Tailwind won’t convert it to a space:"}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>before:content-[\'hello\\_world\']<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["If you’re using something like JSX where the backslash is stripped from the rendered HTML, use ",(0,t.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw",children:"String.raw()"})," so the backslash isn’t treated as a JavaScript escape character:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-jsx",dangerouslySetInnerHTML:{__html:'<code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token known-class-name class-name">String</span><span class="token punctuation">.</span><span class="token property-access">raw</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">before:content-[\'hello\\_world\']</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n  &lt;!-- ... -->\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(a,{level:3,id:"resolving-ambiguities",children:"Resolving ambiguities"}),"\n",(0,t.jsxs)(s.p,{children:["Many utilities in Tailwind share a common namespace but map to different CSS properties. For example ",(0,t.jsx)(s.code,{children:"text-lg"})," and ",(0,t.jsx)(s.code,{children:"text-black"})," both share the ",(0,t.jsx)(s.code,{children:"text-"})," namespace, but one is for ",(0,t.jsx)(s.code,{children:"font-size"})," and the other is for ",(0,t.jsx)(s.code,{children:"color"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"When using arbitrary values, Tailwind can generally handle this ambiguity automatically based on the value you pass in:"}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token comment">&lt;!-- Will generate a font-size utility --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-[22px]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- Will generate a color utility --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-[#bada55]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"Sometimes it really is ambiguous though, for example when using CSS variables:"}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-[var(--my-var)]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["In these situations, you can “hint” the underlying type to Tailwind by adding a ",(0,t.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Types",children:"CSS data type"})," before the value:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token comment">&lt;!-- Will generate a font-size utility --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-[length:var(--my-var)]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n<span class="token comment">&lt;!-- Will generate a color utility --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-[color:var(--my-var)]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(a,{level:2,id:"using-css-and-layer",children:"Using CSS and @layer"}),"\n",(0,t.jsx)(s.p,{children:"When you need to add truly custom CSS rules to a Tailwind project, the easiest approach is to just add the custom CSS to your stylesheet:"}),"\n",(0,t.jsx)(p,{filename:"main.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token selector"><span class="token class">.my-custom-style</span></span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["For more power, you can also use the ",(0,t.jsx)(s.code,{children:"@layer"})," directive to add styles to Tailwind’s ",(0,t.jsx)(s.code,{children:"base"}),", ",(0,t.jsx)(s.code,{children:"components"}),", and ",(0,t.jsx)(s.code,{children:"utilities"})," layers:"]}),"\n",(0,t.jsx)(p,{filename:"main.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@layer</span> components</span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.my-custom-style</span></span> <span class="token punctuation">{</span>\n    <span class="token comment">/* ... */</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)("details",{className:"-mt-0 mb-6 rounded-xl border px-6 py-3 prose prose-slate open:pb-5 dark:prose-dark dark:border-slate-800",children:[(0,t.jsx)("summary",{className:"font-medium cursor-default select-none text-slate-900 dark:text-slate-200",children:"Why does Tailwind group styles into “layers”?"}),(0,t.jsx)(s.p,{children:"In CSS, the order of the rules in your stylesheet decides which declaration wins when two selectors have the same specificity:"}),(0,t.jsx)(s.pre,{className:"language-css",dangerouslySetInnerHTML:{__html:'<code class="language-css"><span class="token selector"><span class="token class">.btn</span></span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token color">blue</span><span class="token punctuation">;</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector"><span class="token class">.bg-black</span></span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token color">black</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code>'}}),(0,t.jsxs)(s.p,{children:["Here, both buttons will be black since ",(0,t.jsx)(s.code,{children:".bg-black"})," comes after ",(0,t.jsx)(s.code,{children:".btn"})," in the CSS:"]}),(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn bg-black<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-black btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code>'}}),(0,t.jsxs)(s.p,{children:["To manage this, Tailwind organizes the styles it generates into three different “layers” — a concept popularized by ",(0,t.jsx)(s.a,{href:"https://www.xfive.co/blog/itcss-scalable-maintainable-css-architecture/#what-is-itcss",children:"ITCSS"}),"."]}),(0,t.jsxs)(s.ul,{role:"list",children:["\n",(0,t.jsxs)(s.li,{children:["The ",(0,t.jsx)(s.code,{children:"base"})," layer is for things like reset rules or default styles applied to plain HTML elements."]}),"\n",(0,t.jsxs)(s.li,{children:["The ",(0,t.jsx)(s.code,{children:"components"})," layer is for class-based styles that you want to be able to override with utilities."]}),"\n",(0,t.jsxs)(s.li,{children:["The ",(0,t.jsx)(s.code,{children:"utilities"})," layer is for small, single-purpose classes that should always take precedence over any other styles."]}),"\n"]}),(0,t.jsxs)(s.p,{children:["Being explicit about this makes it easier to understand how your styles will interact with each other, and using the ",(0,t.jsx)(s.code,{children:"@layer"})," directive lets you control the final declaration order while still organizing your actual code in whatever way you like."]})]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"@layer"})," directive helps you control declaration order by automatically relocating your styles to the corresponding ",(0,t.jsx)(s.code,{children:"@tailwind"})," directive, and also enables features like ",(0,t.jsx)(s.a,{href:"#using-modifiers-with-custom-css",children:"modifiers"})," and ",(0,t.jsx)(s.a,{href:"#removing-unused-custom-css",children:"tree-shaking"})," for your own custom CSS."]}),"\n",(0,t.jsx)(a,{level:3,id:"adding-base-styles",children:"Adding base styles"}),"\n",(0,t.jsxs)(s.p,{children:["If you just want to set some defaults for the page (like the text color, background color, or font family), the easiest option is just adding some classes to the ",(0,t.jsx)(s.code,{children:"html"})," or ",(0,t.jsx)(s.code,{children:"body"})," elements:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text-gray-900 bg-gray-100 font-serif<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsx)(s.p,{children:"This keeps your base styling decisions in your markup alongside all of your other styles, instead of hiding them in a separate file."}),"\n",(0,t.jsxs)(s.p,{children:["If you want to add your own default base styles for specific HTML elements, use the ",(0,t.jsx)(s.code,{children:"@layer"})," directive to add those styles to Tailwind’s ",(0,t.jsx)(s.code,{children:"base"})," layer:"]}),"\n",(0,t.jsx)(p,{filename:"main.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@layer</span> base</span> <span class="token punctuation">{</span>\n  <span class="token selector">h1</span> <span class="token punctuation">{</span>\n    <span class="token atrule atapply"><span class="token rule">@apply</span> text-2<span class="token unit">xl</span><span class="token punctuation">;</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">h2</span> <span class="token punctuation">{</span>\n    <span class="token atrule atapply"><span class="token rule">@apply</span> text-xl<span class="token punctuation">;</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Use the ",(0,t.jsx)(s.a,{href:"/docs/functions-and-directives#theme",children:(0,t.jsx)(s.code,{children:"theme"})})," function or ",(0,t.jsx)(s.a,{href:"/docs/functions-and-directives#apply",children:(0,t.jsx)(s.code,{children:"@apply"})})," directive when adding custom base styles if you want to refer to any of the values defined in your ",(0,t.jsx)(s.a,{href:"/docs/theme",children:"theme"}),"."]}),"\n",(0,t.jsx)(a,{level:3,id:"adding-component-classes",children:"Adding component classes"}),"\n",(0,t.jsxs)(s.p,{children:["Use the ",(0,t.jsx)(s.code,{children:"components"})," layer for any more complicated classes you want to add to your project that you’d still like to be able to override with utility classes."]}),"\n",(0,t.jsxs)(s.p,{children:["Traditionally these would be classes like ",(0,t.jsx)(s.code,{children:"card"}),", ",(0,t.jsx)(s.code,{children:"btn"}),", ",(0,t.jsx)(s.code,{children:"badge"}),"\xa0— that kind of thing."]}),"\n",(0,t.jsx)(p,{filename:"main.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@layer</span> components</span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.card</span></span> <span class="token punctuation">{</span>\n    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'colors.white\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'borderRadius.lg\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'spacing.6\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'boxShadow.xl\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["By defining component classes in the ",(0,t.jsx)(s.code,{children:"components"})," layer, you can still use utility classes to override them when necessary:"]}),"\n",(0,t.jsx)(s.pre,{className:"language-html",dangerouslySetInnerHTML:{__html:'<code class="language-html"><span class="token comment">&lt;!-- Will look like a card, but with square corners --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card rounded-none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code>'}}),"\n",(0,t.jsxs)(s.p,{children:["Using Tailwind you probably don’t need these types of classes as often as you think. Read our guide on ",(0,t.jsx)(s.a,{href:"/docs/reusing-styles",children:"Reusing Styles"})," for our recommendations."]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"components"})," layer is also a good place to put custom styles for any third-party components you’re using:"]}),"\n",(0,t.jsx)(p,{filename:"main.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@layer</span> components</span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.select2-dropdown</span></span> <span class="token punctuation">{</span>\n    <span class="token atrule atapply"><span class="token rule">@apply</span> rounded-b-lg shadow-md<span class="token punctuation">;</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token selector"><span class="token class">.select2-search</span></span> <span class="token punctuation">{</span>\n    <span class="token atrule atapply"><span class="token rule">@apply</span> border border-gray-300 rounded<span class="token punctuation">;</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token selector"><span class="token class">.select2-results__group</span></span> <span class="token punctuation">{</span>\n    <span class="token atrule atapply"><span class="token rule">@apply</span> text-lg font-bold text-gray-900<span class="token punctuation">;</span></span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Use the ",(0,t.jsx)(s.a,{href:"/docs/functions-and-directives#theme",children:(0,t.jsx)(s.code,{children:"theme"})})," function or ",(0,t.jsx)(s.a,{href:"/docs/functions-and-directives#apply",children:(0,t.jsx)(s.code,{children:"@apply"})})," directive when adding custom component styles if you want to refer to any of the values defined in your ",(0,t.jsx)(s.a,{href:"/docs/theme",children:"theme"}),"."]}),"\n",(0,t.jsx)(a,{level:3,id:"adding-custom-utilities",children:"Adding custom utilities"}),"\n",(0,t.jsxs)(s.p,{children:["Add any of your own custom utility classes to Tailwind’s ",(0,t.jsx)(s.code,{children:"utilities"})," layer:"]}),"\n",(0,t.jsx)(p,{filename:"main.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@layer</span> utilities</span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.content-auto</span></span> <span class="token punctuation">{</span>\n    <span class="token property">content-visibility</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"This can be useful when there’s a CSS feature you’d like to use in your project that Tailwind doesn’t include utilities for out of the box."}),"\n",(0,t.jsx)(a,{level:3,id:"using-modifiers-with-custom-css",children:"Using modifiers with custom CSS"}),"\n",(0,t.jsxs)(s.p,{children:["Any custom styles you add to Tailwind with ",(0,t.jsx)(s.code,{children:"@layer"})," will automatically support Tailwind’s modifier syntax for handling things like hover states, responsive breakpoints, dark mode, and more."]}),"\n",(0,t.jsx)(p,{filename:"CSS",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@layer</span> utilities</span> <span class="token punctuation">{</span>\n  <span class="token selector"><span class="token class">.content-auto</span></span> <span class="token punctuation">{</span>\n    <span class="token property">content-visibility</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsx)(p,{filename:"HTML",code:'<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="code-highlight bg-code-highlight">lg:dark:content-auto</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token comment">&lt;!-- ... --></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Learn more about how these modifiers work in the ",(0,t.jsx)(s.a,{href:"/docs/hover-focus-and-other-states",children:"Hover, Focus, and Other States"})," documentation."]}),"\n",(0,t.jsx)(a,{level:3,id:"removing-unused-custom-css",children:"Removing unused custom CSS"}),"\n",(0,t.jsxs)(s.p,{children:["Any custom styles you add to the ",(0,t.jsx)(s.code,{children:"base"}),", ",(0,t.jsx)(s.code,{children:"components"}),", or ",(0,t.jsx)(s.code,{children:"utilities"})," layers will only be included in your compiled CSS if those styles are actually used in your HTML."]}),"\n",(0,t.jsx)(p,{filename:"main.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span>\n\n<span class="token atrule"><span class="token rule">@layer</span> components</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* This won\'t be included in your compiled CSS unless you actually use it */</span>\n  <span class="token selector"><span class="token class">.card</span></span> <span class="token punctuation">{</span>\n    <span class="token comment">/* ... */</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["If you want to add some custom CSS that should always be included, add it to your stylesheet without using the ",(0,t.jsx)(s.code,{children:"@layer"})," directive:"]}),"\n",(0,t.jsx)(p,{filename:"main.css",code:'<pre class="language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@tailwind</span> base<span class="token punctuation">;</span></span>\n<span class="token atrule"><span class="token rule">@tailwind</span> components<span class="token punctuation">;</span></span>\n\n<span class="token comment">/* This will always be included in your compiled CSS */</span>\n<span class="token selector"><span class="token class">.card</span></span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n\n<span class="token atrule"><span class="token rule">@tailwind</span> utilities<span class="token punctuation">;</span></span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Make sure to put your custom styles where they need to go to get the precedence behavior you want. In the example above, we’ve added the ",(0,t.jsx)(s.code,{children:".card"})," class before ",(0,t.jsx)(s.code,{children:"@tailwind utilities"})," to make sure utilities can still override it."]}),"\n",(0,t.jsx)(a,{level:3,id:"using-multiple-css-files",children:"Using multiple CSS files"}),"\n",(0,t.jsxs)(s.p,{children:["If you are writing a lot of CSS and organizing it into multiple files, make sure those files are combined into a single stylesheet before processing them with Tailwind, or you’ll see errors about using ",(0,t.jsx)(s.code,{children:"@layer"})," without the corresponding ",(0,t.jsx)(s.code,{children:"@tailwind"})," directive."]}),"\n",(0,t.jsxs)(s.p,{children:["The easiest way to do this is using the ",(0,t.jsx)(s.a,{href:"https://github.com/postcss/postcss-import",children:"postcss-import"})," plugin:"]}),"\n",(0,t.jsx)(p,{filename:"postcss.config.js",code:'<pre class="language-diff-js"><code class="language-diff-js"><span class="token language-js unchanged"><span class="token plain">module</span><span class="token punctuation">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">  </span><span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token plain"></span>\n</span><span class="token language-js inserted"><span class="token plain">    </span><span class="token string-property property">\'postcss-import\'</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">    </span><span class="token literal-property property">tailwindcss</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">    </span><span class="token literal-property property">autoprefixer</span><span class="token operator">:</span><span class="token plain"> </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain">  </span><span class="token punctuation">}</span><span class="token plain"></span>\n</span><span class="token language-js unchanged"><span class="token plain"></span><span class="token punctuation">}</span>\n</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Learn more in our ",(0,t.jsx)(s.a,{href:"/docs/using-with-preprocessors#build-time-imports",children:"build-time imports"})," documentation."]}),"\n",(0,t.jsx)(a,{level:3,id:"layers-and-per-component-css",children:"Layers and per-component CSS"}),"\n",(0,t.jsxs)(s.p,{children:["Component frameworks like Vue and Svelte support adding per-component styles within a ",(0,t.jsx)(s.code,{children:"<style>"})," block that lives in each component file."]}),"\n",(0,t.jsxs)(s.p,{children:["While you can use features like ",(0,t.jsx)(s.code,{children:"@apply"})," and ",(0,t.jsx)(s.code,{children:"theme"})," inside component styles like this, the ",(0,t.jsx)(s.code,{children:"@layer"})," directive will not work and you’ll see an error about ",(0,t.jsx)(s.code,{children:"@layer"})," being used without a matching ",(0,t.jsx)(s.code,{children:"@tailwind"})," directive:"]}),"\n",(0,t.jsxs)(l.qm,{children:["Don’t use ",(0,t.jsx)(s.code,{children:"@layer"})," in component styles"]}),"\n",(0,t.jsx)(p,{filename:"Card.svelte",code:'<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token comment">/* Won\'t work because this file is processed in isolation */</span>\n  <span class="token atrule"><span class="token rule">@layer</span> components</span> <span class="token punctuation">{</span>\n    <span class="token selector">div</span> <span class="token punctuation">{</span>\n      <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'colors.white\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'borderRadius.lg\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'spacing.6\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'boxShadow.xl\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["This is because under-the-hood, frameworks like Vue and Svelte are processing every single ",(0,t.jsx)(s.code,{children:"<style>"})," block independently, and running your PostCSS plugin chain against each one in isolation."]}),"\n",(0,t.jsxs)(s.p,{children:["That means if you have 10 components that each have a ",(0,t.jsx)(s.code,{children:"<style>"})," block, Tailwind is being run 10 separate times, and each run has zero knowledge about the other runs. Because of this, Tailwind can’t take the styles you define in a ",(0,t.jsx)(s.code,{children:"@layer"})," and move them to the corresponding ",(0,t.jsx)(s.code,{children:"@tailwind"})," directive, because as far as Tailwind can tell there is no ",(0,t.jsx)(s.code,{children:"@tailwind"})," directive to move it to."]}),"\n",(0,t.jsxs)(s.p,{children:["One solution to this is to simply ",(0,t.jsx)(s.em,{children:"not"})," use ",(0,t.jsx)(s.code,{children:"@layer"})," inside your component styles:"]}),"\n",(0,t.jsxs)(l.Vw,{children:["Add your styles without using ",(0,t.jsx)(s.code,{children:"@layer"})]}),"\n",(0,t.jsx)(p,{filename:"Card.svelte",code:'<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">div</span> <span class="token punctuation">{</span>\n    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'colors.white\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'borderRadius.lg\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'spacing.6\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'boxShadow.xl\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>'}),"\n",(0,t.jsx)(s.p,{children:"You lose the ability to control the precedence of your styles, but unfortunately that’s totally out of our control because of how these tools work."}),"\n",(0,t.jsx)(s.p,{children:"Our recommendation is that you just don’t use component styles like this at all and instead use Tailwind the way it’s intended to be used — as a single global stylesheet where you use the classes directly in your HTML:"}),"\n",(0,t.jsx)(l.Vw,{children:"Use Tailwind’s utilities instead of component styles"}),"\n",(0,t.jsx)(p,{filename:"Card.svelte",code:'<pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-white rounded-lg p-6 shadow-xl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>'}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(a,{level:2,id:"writing-plugins",children:"Writing plugins"}),"\n",(0,t.jsx)(s.p,{children:"You can also add custom styles to your project using Tailwind’s plugin system instead of using a CSS file:"}),"\n",(0,t.jsx)(p,{filename:"tailwind.config.js",code:'<pre class="language-js"><code class="language-js"><span class="token keyword">const</span> plugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'tailwindcss/plugin\'</span><span class="token punctuation">)</span>\n\nmodule<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> addBase<span class="token punctuation">,</span> addComponents<span class="token punctuation">,</span> addUtilities<span class="token punctuation">,</span> theme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">addBase</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token string-property property">\'h1\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'fontSize.2xl\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token string-property property">\'h2\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'fontSize.xl\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token function">addComponents</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token string-property property">\'.card\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'colors.white\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'borderRadius.lg\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'spacing.6\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">boxShadow</span><span class="token operator">:</span> <span class="token function">theme</span><span class="token punctuation">(</span><span class="token string">\'boxShadow.xl\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token function">addUtilities</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token string-property property">\'.content-auto\'</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">contentVisibility</span><span class="token operator">:</span> <span class="token string">\'auto\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span></code></pre>'}),"\n",(0,t.jsxs)(s.p,{children:["Learn more about writing your own plugins in the ",(0,t.jsx)(s.a,{href:"/docs/plugins",children:"Plugins"})," documentation."]})]})}function d(n={}){return(0,t.jsx)(r,Object.assign({},n,{children:(0,t.jsx)(u,n)}))}function k(n,s){throw Error("Expected "+(s?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}s.default=d,d.layoutProps={Layout:i,meta:{title:"Adding Custom Styles",description:"Best practices for adding your own custom styles to Tailwind."},slug:"adding-custom-styles",tableOfContents:[{title:"Customizing your theme",slug:"customizing-your-theme",children:[]},{title:"Using arbitrary values",slug:"using-arbitrary-values",children:[{title:"Arbitrary properties",slug:"arbitrary-properties",children:[]},{title:"Arbitrary variants",slug:"arbitrary-variants",children:[]},{title:"Handling whitespace",slug:"handling-whitespace",children:[]},{title:"Resolving ambiguities",slug:"resolving-ambiguities",children:[]}]},{title:"Using CSS and @layer",slug:"using-css-and-layer",children:[{title:"Adding base styles",slug:"adding-base-styles",children:[]},{title:"Adding component classes",slug:"adding-component-classes",children:[]},{title:"Adding custom utilities",slug:"adding-custom-utilities",children:[]},{title:"Using modifiers with custom CSS",slug:"using-modifiers-with-custom-css",children:[]},{title:"Removing unused custom CSS",slug:"removing-unused-custom-css",children:[]},{title:"Using multiple CSS files",slug:"using-multiple-css-files",children:[]},{title:"Layers and per-component CSS",slug:"layers-and-per-component-css",children:[]}]},{title:"Writing plugins",slug:"writing-plugins",children:[]}]}},64637:function(n,s,a){"use strict";a.d(s,{E:function(){return u}});var t=a(85893),e=a(67294),p=a(59965),o=a(86010),l=a(4493);function c({className:n}){return(0,t.jsx)("div",{className:(0,o.Z)("pointer-events-none absolute inset-0",n)})}function i({children:n,selectedIndex:s,myIndex:a,marker:e}){let l=s===a,i={leading:l?null:s===a-1?"capped":"normal",trailing:l?null:s===a+1?"capped":"normal"};return(0,t.jsxs)(p.O,{className:(0,o.Z)("flex items-center relative z-10 overflow-hidden px-4 py-1 [&:not(:focus-visible)]:focus:outline-none",l?"text-sky-300":"text-slate-400"),children:[(0,t.jsx)("span",{className:"z-10",children:n}),"close"===e&&(0,t.jsx)("svg",{viewBox:"0 0 4 4",className:"ml-2.5 flex-none w-1 h-1 text-slate-500 overflow-visible",children:(0,t.jsx)("path",{d:"M-1 -1L5 5M5 -1L-1 5",fill:"none",stroke:"currentColor",strokeLinecap:"round"})}),"modified"===e&&(0,t.jsx)("div",{className:"ml-2.5 flex-none w-1 h-1 rounded-full bg-current"}),!l&&(0,t.jsx)(c,{className:(0,o.Z)("bg-slate-700/50 border-y border-slate-500/30","capped"===i.leading&&"border-l rounded-tl","capped"===i.trailing&&"border-r rounded-tr")}),"normal"===i.trailing&&(0,t.jsx)(c,{className:"inset-y-px border-r border-slate-200/5 z-20"}),l&&(0,t.jsx)(c,{className:"border-b border-b-sky-300"})]})}let r={plain:({children:n})=>(0,t.jsx)("div",{className:"not-prose bg-slate-800 rounded-xl shadow-md",children:n}),framed:({children:n,...s})=>(0,t.jsx)(l.RQ,{...s,children:(0,t.jsx)("div",{className:"not-prose bg-slate-800 rounded-tl-xl shadow-md",children:n})})};function u({children:n,style:s="plain",actions:a,...l}){let[c,u]=(0,e.useState)(0),d=r[s];return(0,t.jsx)(d,{...l,children:(0,t.jsxs)(p.O.Group,{as:"div",onChange:u,children:[(0,t.jsxs)("div",{className:"flex",children:[(0,t.jsx)(p.O.List,{className:"flex text-slate-400 text-xs leading-6 overflow-hidden rounded-tl-xl pt-2",children:n.map((n,s)=>(0,t.jsx)(i,{myIndex:s,selectedIndex:c,children:n.props.filename},n.props.filename))}),(0,t.jsx)("div",{className:"flex-auto flex pt-2 rounded-tr-xl overflow-hidden",children:(0,t.jsx)("div",{className:(0,o.Z)("flex-auto flex justify-end bg-slate-700/50 border-y border-slate-500/30 pr-4",c===n.length-1?"rounded-tl border-l":"")})}),a?(0,t.jsx)("div",{className:"absolute top-2 right-4 h-8 flex",children:a({selectedIndex:c})}):null]}),(0,t.jsx)(p.O.Panels,{className:"flex overflow-auto",children:n.map(n=>(0,t.jsx)(p.O.Panel,{className:"flex-none min-w-full p-5 text-sm leading-6 text-slate-50 ligatures-none",...n.props.code?{dangerouslySetInnerHTML:{__html:n.props.code}}:{children:n.props.children}},n.props.filename))})]})})}},30196:function(n,s,a){"use strict";a.d(s,{$o:function(){return o},Vw:function(){return e},qm:function(){return p}});var t=a(85893);function e({children:n}){return(0,t.jsxs)("div",{className:"flex items-start my-6 space-x-4",children:[(0,t.jsxs)("div",{className:"relative mt-1 w-4 h-4 rounded-full bg-cyan-500 text-white flex items-center justify-center ring-2 ring-cyan-500 dark:bg-sky-500 dark:ring-sky-500",children:[(0,t.jsx)("svg",{width:"6",height:"4.5",className:"overflow-visible","aria-hidden":"true",children:(0,t.jsx)("path",{d:"M6 0L2 4.5L0 2.5",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})}),(0,t.jsx)("div",{className:"absolute top-full mt-1 left-[0.46875rem] w-px h-[1.375rem] bg-cyan-500/30 rounded-full dark:bg-sky-400/30"})]}),(0,t.jsx)("p",{className:"m-0 flex-1 text-base font-semibold text-slate-900 dark:text-slate-200",children:n})]})}function p({children:n}){return(0,t.jsxs)("div",{className:"flex items-start my-6 space-x-4",children:[(0,t.jsxs)("div",{className:"relative mt-1 w-4 h-4 rounded-full bg-rose-400 text-white flex items-center justify-center ring-2 ring-rose-400 dark:bg-red-400 dark:ring-red-400",children:[(0,t.jsx)("svg",{width:"6",height:"6",className:"overflow-visible","aria-hidden":"true",children:(0,t.jsx)("path",{d:"M0 0L6 6M6 0L0 6",fill:"none",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round"})}),(0,t.jsx)("div",{className:"absolute top-full mt-1 left-[0.46875rem] w-px h-[1.375rem] bg-rose-200 rounded-full dark:bg-red-200/25"})]}),(0,t.jsx)("p",{className:"m-0 flex-1 text-base font-semibold text-slate-900 dark:text-slate-200",children:n})]})}function o({children:n}){return(0,t.jsxs)("div",{className:"mt-6 -mb-1 flex space-x-2",children:[(0,t.jsx)("svg",{className:"flex-none w-5 h-5 text-slate-400 dark:text-slate-600",viewBox:"0 0 20 20",fill:"currentColor","aria-hidden":"true",children:(0,t.jsx)("path",{fillRule:"evenodd",d:"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z",clipRule:"evenodd"})}),(0,t.jsx)("p",{className:"m-0 text-slate-700 text-sm font-medium dark:text-slate-200",children:n})]})}},72788:function(n,s,a){"use strict";a.d(s,{L:function(){return l}});var t=a(85893),e=a(97903),p=a(77929),o=a(87308);function l(n){return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(p.Dx,{children:n.layoutProps.meta.metaTitle||n.layoutProps.meta.title}),(0,t.jsx)(e.C,{nav:o.u,...n})]})}l.nav=o.u},59965:function(n,s,a){"use strict";a.d(s,{O:function(){return A}});var t,e,p,o=a(67294),l=a(61363),c=a(73781),i=a(19946),r=a(16723),u=a(3855),d=a(14157),k=a(23784),g=a(14879),h=a(46045);function m({onFocus:n}){let[s,a]=(0,o.useState)(!0),t=(0,g.t)();return s?o.createElement(h._,{as:"button",type:"button",features:h.A.Focusable,onFocus:s=>{s.preventDefault();let e,p=50;e=requestAnimationFrame(function s(){if(p--<=0){e&&cancelAnimationFrame(e);return}if(n()){if(cancelAnimationFrame(e),!t.current)return;a(!1);return}e=requestAnimationFrame(s)})}}):null}var y=a(84575),x=a(32984),f=a(81021),b=a(15466),j=a(12351);let v=o.createContext(null);function w({children:n}){let s=o.useRef({groups:new Map,get(n,s){var a;let t=this.groups.get(n);t||(t=new Map,this.groups.set(n,t));let e=null!=(a=t.get(s))?a:0;return t.set(s,e+1),[Array.from(t.keys()).indexOf(s),function(){let n=t.get(s);n>1?t.set(s,n-1):t.delete(s)}]}});return o.createElement(v.Provider,{value:s},n)}function S(n){let s=o.useContext(v);if(!s)throw Error("You must wrap your component in a <StableCollection>");let a=function(){var n,s,a;let t=null!=(a=null==(s=null==(n=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED)?void 0:n.ReactCurrentOwner)?void 0:s.current)?a:null;if(!t)return Symbol();let e=[],p=t;for(;p;)e.push(p.index),p=p.return;return"$."+e.join(".")}(),[t,e]=s.current.get(n,a);return o.useEffect(()=>e,[]),t}var T=((t=T||{})[t.Forwards=0]="Forwards",t[t.Backwards=1]="Backwards",t),_=((e=_||{})[e.Less=-1]="Less",e[e.Equal=0]="Equal",e[e.Greater=1]="Greater",e),C=((p=C||{})[p.SetSelectedIndex=0]="SetSelectedIndex",p[p.RegisterTab=1]="RegisterTab",p[p.UnregisterTab=2]="UnregisterTab",p[p.RegisterPanel=3]="RegisterPanel",p[p.UnregisterPanel=4]="UnregisterPanel",p);let I={0(n,s){var a;let t=(0,y.z2)(n.tabs,n=>n.current),e=(0,y.z2)(n.panels,n=>n.current),p=t.filter(n=>{var s;return!(null!=(s=n.current)&&s.hasAttribute("disabled"))}),o={...n,tabs:t,panels:e};if(s.index<0||s.index>t.length-1){let a=(0,x.E)(Math.sign(s.index-n.selectedIndex),{[-1]:()=>1,0:()=>(0,x.E)(Math.sign(s.index),{[-1]:()=>0,0:()=>0,1:()=>1}),1:()=>0});if(0===p.length)return o;let e=(0,x.E)(a,{0:()=>t.indexOf(p[0]),1:()=>t.indexOf(p[p.length-1])});return{...o,selectedIndex:-1===e?n.selectedIndex:e}}let l=t.slice(0,s.index),c=[...t.slice(s.index),...l].find(n=>p.includes(n));if(!c)return o;let i=null!=(a=t.indexOf(c))?a:n.selectedIndex;return -1===i&&(i=n.selectedIndex),{...o,selectedIndex:i}},1(n,s){var a;if(n.tabs.includes(s.tab))return n;let t=n.tabs[n.selectedIndex],e=(0,y.z2)([...n.tabs,s.tab],n=>n.current),p=null!=(a=e.indexOf(t))?a:n.selectedIndex;return -1===p&&(p=n.selectedIndex),{...n,tabs:e,selectedIndex:p}},2:(n,s)=>({...n,tabs:n.tabs.filter(n=>n!==s.tab)}),3:(n,s)=>n.panels.includes(s.panel)?n:{...n,panels:(0,y.z2)([...n.panels,s.panel],n=>n.current)},4:(n,s)=>({...n,panels:n.panels.filter(n=>n!==s.panel)})},N=(0,o.createContext)(null);function L(n){let s=(0,o.useContext)(N);if(null===s){let s=Error(`<${n} /> is missing a parent <Tab.Group /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(s,L),s}return s}N.displayName="TabsDataContext";let M=(0,o.createContext)(null);function E(n){let s=(0,o.useContext)(M);if(null===s){let s=Error(`<${n} /> is missing a parent <Tab.Group /> component.`);throw Error.captureStackTrace&&Error.captureStackTrace(s,E),s}return s}function z(n,s){return(0,x.E)(s.type,I,n,s)}M.displayName="TabsActionsContext";let P=o.Fragment,R=j.AN.RenderStrategy|j.AN.Static,A=Object.assign((0,j.yV)(function(n,s){var a,t;let e=(0,i.M)(),{id:p=`headlessui-tabs-tab-${e}`,...u}=n,{orientation:g,activation:h,selectedIndex:m,tabs:v,panels:w}=L("Tab"),T=E("Tab"),_=L("Tab"),C=(0,o.useRef)(null),I=(0,k.T)(C,s);(0,r.e)(()=>T.registerTab(C),[T,C]);let N=S("tabs"),M=v.indexOf(C);-1===M&&(M=N);let z=M===m,P=(0,c.z)(n=>{var s;let a=n();if(a===y.fE.Success&&"auto"===h){let n=null==(s=(0,b.r)(C))?void 0:s.activeElement,a=_.tabs.findIndex(s=>s.current===n);-1!==a&&T.change(a)}return a}),R=(0,c.z)(n=>{let s=v.map(n=>n.current).filter(Boolean);if(n.key===l.R.Space||n.key===l.R.Enter){n.preventDefault(),n.stopPropagation(),T.change(M);return}switch(n.key){case l.R.Home:case l.R.PageUp:return n.preventDefault(),n.stopPropagation(),P(()=>(0,y.jA)(s,y.TO.First));case l.R.End:case l.R.PageDown:return n.preventDefault(),n.stopPropagation(),P(()=>(0,y.jA)(s,y.TO.Last))}if(P(()=>(0,x.E)(g,{vertical:()=>n.key===l.R.ArrowUp?(0,y.jA)(s,y.TO.Previous|y.TO.WrapAround):n.key===l.R.ArrowDown?(0,y.jA)(s,y.TO.Next|y.TO.WrapAround):y.fE.Error,horizontal:()=>n.key===l.R.ArrowLeft?(0,y.jA)(s,y.TO.Previous|y.TO.WrapAround):n.key===l.R.ArrowRight?(0,y.jA)(s,y.TO.Next|y.TO.WrapAround):y.fE.Error}))===y.fE.Success)return n.preventDefault()}),A=(0,o.useRef)(!1),O=(0,c.z)(()=>{var n;A.current||(A.current=!0,null==(n=C.current)||n.focus({preventScroll:!0}),T.change(M),(0,f.Y)(()=>{A.current=!1}))}),q=(0,c.z)(n=>{n.preventDefault()}),H=(0,o.useMemo)(()=>({selected:z}),[z]),U={ref:I,onKeyDown:R,onMouseDown:q,onClick:O,id:p,role:"tab",type:(0,d.f)(n,C),"aria-controls":null==(t=null==(a=w[M])?void 0:a.current)?void 0:t.id,"aria-selected":z,tabIndex:z?0:-1};return(0,j.sY)({ourProps:U,theirProps:u,slot:H,defaultTag:"button",name:"Tabs.Tab"})}),{Group:(0,j.yV)(function(n,s){let{defaultIndex:a=0,vertical:t=!1,manual:e=!1,onChange:p,selectedIndex:l=null,...i}=n,d=t?"vertical":"horizontal",g=e?"manual":"auto",h=null!==l,x=(0,k.T)(s),[f,b]=(0,o.useReducer)(z,{selectedIndex:null!=l?l:a,tabs:[],panels:[]}),v=(0,o.useMemo)(()=>({selectedIndex:f.selectedIndex}),[f.selectedIndex]),S=(0,u.E)(p||(()=>{})),T=(0,u.E)(f.tabs),_=(0,o.useMemo)(()=>({orientation:d,activation:g,...f}),[d,g,f]),C=(0,c.z)(n=>(b({type:1,tab:n}),()=>b({type:2,tab:n}))),I=(0,c.z)(n=>(b({type:3,panel:n}),()=>b({type:4,panel:n}))),L=(0,c.z)(n=>{E.current!==n&&S.current(n),h||b({type:0,index:n})}),E=(0,u.E)(h?n.selectedIndex:f.selectedIndex),R=(0,o.useMemo)(()=>({registerTab:C,registerPanel:I,change:L}),[]);return(0,r.e)(()=>{b({type:0,index:null!=l?l:a})},[l]),(0,r.e)(()=>{if(void 0===E.current||f.tabs.length<=0)return;let n=(0,y.z2)(f.tabs,n=>n.current);n.some((n,s)=>f.tabs[s]!==n)&&L(n.indexOf(f.tabs[E.current]))}),o.createElement(w,null,o.createElement(M.Provider,{value:R},o.createElement(N.Provider,{value:_},_.tabs.length<=0&&o.createElement(m,{onFocus:()=>{var n,s;for(let a of T.current)if((null==(n=a.current)?void 0:n.tabIndex)===0)return null==(s=a.current)||s.focus(),!0;return!1}}),(0,j.sY)({ourProps:{ref:x},theirProps:i,slot:v,defaultTag:P,name:"Tabs"}))))}),List:(0,j.yV)(function(n,s){let{orientation:a,selectedIndex:t}=L("Tab.List"),e=(0,k.T)(s);return(0,j.sY)({ourProps:{ref:e,role:"tablist","aria-orientation":a},theirProps:n,slot:{selectedIndex:t},defaultTag:"div",name:"Tabs.List"})}),Panels:(0,j.yV)(function(n,s){let{selectedIndex:a}=L("Tab.Panels"),t=(0,k.T)(s),e=(0,o.useMemo)(()=>({selectedIndex:a}),[a]);return(0,j.sY)({ourProps:{ref:t},theirProps:n,slot:e,defaultTag:"div",name:"Tabs.Panels"})}),Panel:(0,j.yV)(function(n,s){var a,t,e,p;let l=(0,i.M)(),{id:c=`headlessui-tabs-panel-${l}`,tabIndex:u=0,...d}=n,{selectedIndex:g,tabs:m,panels:y}=L("Tab.Panel"),x=E("Tab.Panel"),f=(0,o.useRef)(null),b=(0,k.T)(f,s);(0,r.e)(()=>x.registerPanel(f),[x,f]);let v=S("panels"),w=y.indexOf(f);-1===w&&(w=v);let T=w===g,_=(0,o.useMemo)(()=>({selected:T}),[T]),C={ref:b,id:c,role:"tabpanel","aria-labelledby":null==(t=null==(a=m[w])?void 0:a.current)?void 0:t.id,tabIndex:T?u:-1};return T||null!=(e=d.unmount)&&!e||null!=(p=d.static)&&p?(0,j.sY)({ourProps:C,theirProps:d,slot:_,defaultTag:"div",features:R,visible:T,name:"Tabs.Panel"}):o.createElement(h._,{as:"span","aria-hidden":"true",...C})})})},11151:function(n,s,a){"use strict";a.d(s,{Zo:function(){return l},ah:function(){return p}});var t=a(67294);let e=t.createContext({});function p(n){let s=t.useContext(e);return t.useMemo(()=>"function"==typeof n?n(s):{...s,...n},[s,n])}let o={};function l({components:n,children:s,disableParentContext:a}){let l;return l=a?"function"==typeof n?n({}):n||o:p(n),t.createElement(e.Provider,{value:l},s)}}},function(n){n.O(0,[3430,9672,9495,224,7308,9774,2888,179],function(){return n(n.s=72253)}),_N_E=n.O()}]);